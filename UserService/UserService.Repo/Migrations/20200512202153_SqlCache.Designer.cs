// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Repo;

namespace UserService.Repo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200512202153_SqlCache")]
    partial class SqlCache
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.CachedData", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Key");

                    b.ToTable("Data","Cache");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.ChampionPostcode", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("UserId", "PostalCode");

                    b.HasIndex("UserId", "PostalCode")
                        .HasName("ix_PostalCode");

                    b.ToTable("ChampionPostcode","User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.PersonalDetails", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressLine3")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Locality")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("OtherPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Postcode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool?>("UnderlyingMedicalCondition");

                    b.HasKey("UserId");

                    b.ToTable("PersonalDetails","UserPersonal");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.PrecalculatedVolunteer", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<byte>("IsVerifiedType");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<double>("SupportRadiusMiles");

                    b.Property<byte>("VolunteerType");

                    b.HasKey("UserId");

                    b.HasIndex("Latitude", "Longitude", "VolunteerType", "IsVerifiedType")
                        .HasAnnotation("SqlServer:Include", new[] { "UserId", "Postcode", "SupportRadiusMiles" });

                    b.ToTable("Volunteer","Precalculation");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.PrecalculationMetaData", b =>
                {
                    b.Property<string>("TableName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("TableName");

                    b.ToTable("MetaData","Precalculation");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.RegistrationHistory", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<byte>("RegistrationStep");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "RegistrationStep");

                    b.ToTable("RegistrationHistory","User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.SupportActivity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<byte>("ActivityId")
                        .HasColumnName("ActivityID");

                    b.HasKey("UserId", "ActivityId");

                    b.ToTable("SupportActivity","User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.SupportPostcode", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("UserId", "PostalCode");

                    b.HasIndex("UserId", "PostalCode")
                        .HasName("ix_PostalCode");

                    b.ToTable("SupportPostcode","User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<bool?>("EmailSharingConsent");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnName("FirebaseUID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("HmscontactConsent")
                        .HasColumnName("HMSContactConsent");

                    b.Property<bool?>("IsVerified");

                    b.Property<bool?>("IsVolunteer");

                    b.Property<bool?>("MobileSharingConsent");

                    b.Property<bool?>("OtherPhoneSharingConsent");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool?>("StreetChampionRoleUnderstood");

                    b.Property<double?>("SupportRadiusMiles");

                    b.Property<bool?>("SupportVolunteersByPhone");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUid")
                        .HasName("ix_FirebaseUID");

                    b.ToTable("User","User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.ChampionPostcode", b =>
                {
                    b.HasOne("UserService.Repo.EntityFramework.Entities.User", "User")
                        .WithMany("ChampionPostcode")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ChampionPostcode_User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.PersonalDetails", b =>
                {
                    b.HasOne("UserService.Repo.EntityFramework.Entities.User", "User")
                        .WithOne("PersonalDetails")
                        .HasForeignKey("UserService.Repo.EntityFramework.Entities.PersonalDetails", "UserId")
                        .HasConstraintName("FK_PersonalDetails_User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.RegistrationHistory", b =>
                {
                    b.HasOne("UserService.Repo.EntityFramework.Entities.User", "User")
                        .WithMany("RegistrationHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RegistrationHistory_User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.SupportActivity", b =>
                {
                    b.HasOne("UserService.Repo.EntityFramework.Entities.User", "User")
                        .WithMany("SupportActivity")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SupportActivity_User");
                });

            modelBuilder.Entity("UserService.Repo.EntityFramework.Entities.SupportPostcode", b =>
                {
                    b.HasOne("UserService.Repo.EntityFramework.Entities.User", "User")
                        .WithMany("SupportPostcode")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SupportPostcode_User");
                });
#pragma warning restore 612, 618
        }
    }
}
